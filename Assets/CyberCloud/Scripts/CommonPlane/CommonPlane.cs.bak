
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
/// <summary>
/// 视博云通用组件
/// 对外提供获取子组件的接口
/// </summary>
public class CommonPlane: MonoBehaviour {
    [SerializeField]
    /// <summary>
    /// 弱提示
    /// </summary>
    private Hint hint;
    [SerializeField]
    /// <summary>
    /// 弹框提示
    /// </summary>
    private MyDialog mydialog;
    [SerializeField]
    /// <summary>
    /// 提示信息
    /// </summary>

    private TipsControl tipsControl;
    [SerializeField]
    /// <summary>
    /// 无手柄时的退出提示
    /// </summary>
    private GameObject setingBt;
    [SerializeField]
    /// <summary>
    /// 设置界面
    /// </summary>
    private SetingDialog setingDialog;
    [SerializeField]
    private XMPPTool xmpptool;
    [SerializeField]
    private TestCastScreen testCastScreen;
  
    private GameAppControl gameAppControl;
    
    // Use this for initialization
    public static string exitByAppSelf = "0x0000FF02";//应用内主动退出错误码
    private static string networkErrorCode = "0x00702001";
    public static string resousefull = "0x34321002";
    private Material newSkybox;
    void Awake()
    {
        GameObject gamePlane = GameObject.Find("GamePlane");
        if (gamePlane != null)
        {

            gameAppControl = gamePlane.GetComponent<GameAppControl>();
        }
    }
    void Start()
    {
#if ISPICO
        Debug.LogError("ucvr ispico");
#endif

      
        newSkybox = RenderSettings.skybox;
        if (newSkybox == null) {
            Debug.LogError("ucvr newSkybox is null" );
        }
        if (CyberCloudConfig.currentType != CyberCloudConfig.DeviceTypes.Pico)//初始化时隐藏手柄显示凝视点 pico内部代码已处理
        {
            connectStatusChange();
        }
        updateControllerConnected();
        //mydialog.OnButtonClickCancel(null);
        //CyberCloud_UnitySDKAPI.HeadBox.changeRenderdHeadType(CyberCloud_UnitySDKAPI.HeadBoxDofType.Dof3);
   

        //CyberCloud_UnitySDKAPI.HeadBox.changeRenderdHeadType(CyberCloud_UnitySDKAPI.HeadBoxDofType.Dof6);
        //showSetingDialog();
    }
    bool checkNetWorkEnable = true;
    bool isTest = false;
    // Update is called once per frame
    bool initContolerType = false;
    /// <summary>
    /// 更新手柄连接状态
    /// </summary>
    /// <returns></returns>
    private List<int> updateControllerConnected() {
        handlerList = CyberCloud_UnitySDKAPI.ControllerManager.getControllerConnected();

        if (handlerList != null && currentConnectContrlor == false) {
            currentConnectContrlor = true;
            if (CyberCloudConfig.currentType != CyberCloudConfig.DeviceTypes.Pico)
            {//pico内部代码已处理
            
                connectStatusChange();
            }
        }
        else if(handlerList == null&& currentConnectContrlor==true){
            currentConnectContrlor = false;
            if (CyberCloudConfig.currentType != CyberCloudConfig.DeviceTypes.Pico) {//pico内部代码已处理
                connectStatusChange();
            }
        }
  
        return handlerList;
    }
    public void changeSkyBox(bool addSkyBox) {
        if (addSkyBox)
            RenderSettings.skybox = newSkybox;
        else
            RenderSettings.skybox = null;
       
    }
    private void connectStatusChange() {
        Debug.Log("ucvr currentConnectContrlor:"+ currentConnectContrlor);
        if (!GameAppControl.getGameRuning())
        {
        	 
             ControllerTool.CloseOrOpenAnyEnableContrlorCursor(CyberCloud_UnitySDKAPI.CursorStatus.openCursor);
        }
    }
    private bool currentConnectContrlor=false;
    public static List<int> handlerList = null;
    private float networkErrorTime = 0;//网络异常时间
    void Update()
    {
 if (ControllerTool.getControllerBtUp(CyberCloud_UnitySDKAPI.ControllerKeyCode.HOME) ) {
            Debug.Log("clickControllerHome exit");
            OnPause();
        }
        updateControllerConnected();
        if (!initContolerType)
        {
            if (CyberCloudConfig.currentType == CyberCloudConfig.DeviceTypes.DaPeng)
            {
              
                ControllerTool.Reflection("changeRenderdHeadType", new object[] { CyberCloud_UnitySDKAPI.HeadBoxDofType.Dof3 });
                initContolerType = true;
            }
            else {
                //十秒内检测手柄状态,如果有手柄连接根据手柄类型显示对应的模型
                if (Time.time < 10 && handlerList != null)
                {

                    CyberCloud_UnitySDKAPI.HeadBoxDofType boxType = CyberCloud_UnitySDKAPI.ControllerManager.getControlerDofType();
                    ///3dof pico头盔需要在此处切换否则手柄会显示在头盔上面
                    if (CyberCloudConfig.currentType == CyberCloudConfig.DeviceTypes.Pico && boxType == CyberCloud_UnitySDKAPI.HeadBoxDofType.Dof3)
                        ControllerTool.Reflection("changeRenderdHandType", new object[] { CyberCloud_UnitySDKAPI.HeadBoxDofType.Dof3 }, "CyberCloud_UnitySDKAPI.ControllerManager");
                    else
                        Debug.Log("ucvr type:" + CyberCloudConfig.currentType + "dof:" + boxType);
                    initContolerType = true;
                }

            }
          
        }
        networkCheck();
      /****/
        //统计帧率 50fps
        {
            FrameNum++;
            TimeNow = Time.time;
            if (TimeNow - TimeLast > 1)
            {
                Debug.Log("ucvr fps " + FrameNum);
                FrameNum = 0;
                TimeLast = TimeNow;
            }
        }
    }
    int FrameNum;
    float TimeNow;
    float TimeLast;
    private void networkCheck() {
        //游戏中时以游戏状态为准不用再判断系统wifi状态（因系统wifi状态不及时 20秒左右才有状态更新 很影响效果）
        if (GameAppControl.getGameRuning())
        {//如果游戏中 网络中断超过2分钟后恢复 弹出错题提示框提示用户退出，2分钟内网络能恢复就不再弹退出提示框

            //判断流化系统网络状态是否异常
            if (GameAppControl.isShowGameingNetworkWrongError)
            {
                if (checkNetWorkEnable == true)
                {
                    Debug.LogError("ucvr isShowGameingNetworkWrongError wait two minitue tiem:"+Time.time);
                    networkErrorTime = networkErrorTime + Time.deltaTime;
                    if (networkErrorTime > 30)
                    {//如果游戏内网络中断后30秒给出错误提示框（）
                        closeHintMsg();
                      
                        gameAppControl.exitCyberGame();
                        showDialogWifiException("network_error_exit", networkErrorCode);
                        checkNetWorkEnable = false;
                    }
                }
            }
            else
            {
                networkErrorTime = 0;
                if (checkNetWorkEnable == false)
                {
                    Debug.LogError("ucvr GameingNetworkResume");
                    checkNetWorkEnable = true;
              
                    if (DialogBase.isShow && mydialog != null)
                    {
                        string desc=mydialog.getDesc();
                        //判断当前提示框是否是网络异常提示框
                        if(desc.IndexOf(networkErrorCode)>-1)
                            mydialog.closeByOther();
                    }
                }
            }

        }
        else
        {
            if (Application.internetReachability == NetworkReachability.NotReachable)
            {
                if (checkNetWorkEnable)
                {

                    Debug.LogError("ucvr 定时检查网络连接异常");


                    closeHintMsg();
                    showDialogWifiException("network_error_exit", networkErrorCode);
                    checkNetWorkEnable = false;


                }

            }
            else
            {
                networkErrorTime = 0;
                if (checkNetWorkEnable == false)
                {
                    //如果初始化完成但是初始化失败再次连接上网时需要重新进行初始
                    if (DataLoader.Instance.initStatus == DataLoader.InitStatus.initOver && DataLoader.Instance.portalIintRet == false)
                    {
                        DataLoader.Instance.reInit();
                    }
                    checkNetWorkEnable = true;

                    if (DialogBase.isShow && mydialog != null)
                    {
                        mydialog.closeByOther();

                    }
                }
            }
        }
    }
    private bool oneBtExitDialog=false;
    /// <summary>
    /// 显示一个按钮的退出确认框
    /// </summary>
    /// <param name="msg"></param>
    public void showDialogOneBtExitDialog(string key, string errorcode)
    {
        oneBtExitDialog = true;
        mydialog.closeByOther();
        showDialogOneBt(key,errorcode);
    }
    public void closeAllDialog()
    {
        if (mydialog)
            mydialog.closeByOther();
        if (setingDialog)
            setingDialog.closeByOther();
    }
    /// <summary>
    /// 显示一个按钮的dialog
    /// </summary>
    /// <param name="msg"></param>
    private void showDialogOneBt(string key,string errorcode)
    {
        string msg = Localization.Get(key);
        if (errorcode != null)
            msg += "(" + errorcode + ")";

        mydialog.gameObject.SetActive(true);
        mydialog.ClickCallBackDelegate += dialogClickCallBack;
        mydialog.changeDialogText(MyDialog.BtType.oneBt,msg);
    }
    public void showDialogWifiException(string key, string errorcode)
    {
        //unity的wifi检测高于游戏内的wifi网络检测所以一旦unity检测出wifi异常弹出对话框
        if (checkNetWorkEnable == false)
            return;
        string msg = Localization.Get(key);
        if (errorcode != null)
            msg += "(" + errorcode + ")";
        mydialog.gameObject.SetActive(true);
        mydialog.ClickCallBackDelegate += showDialogWifiExceptionCallBack;
        mydialog.changeDialogText(MyDialog.BtType.oneBt, msg);
    }
    /// <summary>
    /// 显示两个按钮退出二次确认
    /// </summary>
    public void showExitDialog(string key, string errorcode)
    {
        string msg = Localization.Get(key);
        if (errorcode != null)
            msg += "(" + errorcode + ")";
        mydialog.gameObject.SetActive(true);
        mydialog.ClickCallBackDelegate += dialogClickCallBack;
        mydialog.changeDialogText(MyDialog.BtType.twoBt, msg);
    }
    //比如按home键回到launcher如果在流化中需要退出流化
    void OnDisable()
    {
        print("ucvr cybercloud window OnDisable");
        //退出游戏后需要打开凝视或手柄操控点
        ControllerTool.CloseOrOpenAnyEnableContrlorCursor(CyberCloud_UnitySDKAPI.CursorStatus.openCursor);
        if (GameAppControl.getGameRuning()) {
            print("ucvr exitCyberCloud OnDisable");
            gameAppControl.exitCyberGame();
        }
    }

    public MyDialog getDialog() {
        return mydialog;
    }
    /// <summary>
    /// wifi连接异常
    /// </summary>
    /// <param name="buttonIndex"></param>
    private void showDialogWifiExceptionCallBack(MyDialog.ButtonIndex buttonIndex) {
        if (GameAppControl.getGameRuning())
            gameAppControl.exitCyberGame();
        Application.Quit();
    }
    private void dialogClickCallBack(MyDialog.ButtonIndex buttonIndex) {
        if (buttonIndex == MyDialog.ButtonIndex.bt_ok)
        {
            Debug.Log("ucvr click exit");
            if (GameAppControl.getGameRuning())            
                gameAppControl.exitCyberGame();
            else//退出游戏后需要打开凝视或手柄操控点
                ControllerTool.CloseOrOpenAnyEnableContrlorCursor(CyberCloud_UnitySDKAPI.CursorStatus.openCursor);
        }
        else if (buttonIndex == MyDialog.ButtonIndex.bt_center) {
            Debug.Log("ucvr click exit bt_center");
            if (oneBtExitDialog) {


                if (GameAppControl.getGameRuning())
                    gameAppControl.exitCyberGame();
                else
                {
                 
                        //退出游戏后需要打开凝视或手柄操控点
                        ControllerTool.CloseOrOpenAnyEnableContrlorCursor(CyberCloud_UnitySDKAPI.CursorStatus.openCursor);
                }
            }
        }
        else
        {
            if (GameAppControl.getGameRuning())
            {  //关闭弹框返回游戏
                ControllerTool.CloseOrOpenAnyEnableContrlorCursor(CyberCloud_UnitySDKAPI.CursorStatus.closeCursor);
            }
        }
        oneBtExitDialog = false;
    }
    public void showSetingDialog()
    {
        setingDialog.gameObject.SetActive(true);
        setingDialog.ClickCallBackDelegate = setingDialogClickCallBack;

    }
    public SetingDialog getSetingDialog() {
        return setingDialog;
    }
    private void setingDialogClickCallBack(SetingDialog.ButtonIndex buttonIndex)
    {
        if (buttonIndex == SetingDialog.ButtonIndex.bt_Exit)
        {
            Debug.Log("click exit");
        }
        else
        {
            if (GameAppControl.getGameRuning())//游戏中关闭弹框需返回游戏时要关闭凝视点
            {
                //退出游戏后需要打开凝视或手柄操控点
                ControllerTool.CloseOrOpenAnyEnableContrlorCursor(CyberCloud_UnitySDKAPI.CursorStatus.closeCursor);
            }
            if (buttonIndex == SetingDialog.ButtonIndex.bt_ClickSameScreen)
            {//点击同屏按钮
                Debug.Log("click ClickSameScreen");
                string APP_BIND_STATE = MyTools.readNoSectionFromIni("/sdcard/FJCMCCCloudVR/Config.ini", "APP_BIND_STATE");

                if (APP_BIND_STATE == "1" || Localization.language == "ko")
                {
                    string playUrl = gameAppControl.Cyber_GetCastScreenPlayUrl();

                    if (CyberCloudConfig.castScreenTestConfigFileUrl != null && CyberCloudConfig.castScreenTestConfigFileUrl != "")
                    {
                        //开启投屏测试
                        testCastScreen.gameObject.SetActive(true);
                    }
                    else {
                        if (XMPPTool.castScreen == XMPPTool.CastScreen.CastScreening)
                        {
                            xmpptool.sendBroadcastClose();
                        }
                        else if (XMPPTool.castScreen == XMPPTool.CastScreen.CastScreenTryConnect)
                        {
                            Debug.Log("ucvr 投屏连接中点击投屏按钮无效 ");
                        }
                        else
                        {
                            xmpptool.sendBroadcastOpenVRSTB(playUrl);
                        }

                    }


                }
                else
                {
                    Debug.Log("ucvr userloginstatus:" + APP_BIND_STATE);              
                    showHintMstByDesckey("user_not_logged", 3);
                    
                }


            } else if (buttonIndex == SetingDialog.ButtonIndex.bt_SwitchControl) {
                gameAppControl.updateControllerIndex();
            }
        }
    }
    /// <summary>
    /// 通过国际化配置码显示弱提示
    /// </summary>
    /// <param name="key"></param>
    /// <param name="showtime"></param>
    public void showHintMstByDesckey(string key, int showtime,string errorcode=null, int hintY = 0, bool needFollowCamera = false) {
        //startappinunityedit
        string msg = Localization.Get(key);
        if (errorcode != null)
            msg += "(" + errorcode + ")";
        showHintMsg(msg, showtime, hintY,needFollowCamera);
    }
    public void showHintMsg(string msg, int showtime, int hintY = 0, bool needFollowCamera = false) {
        //positionCenter(hint.gameObject);
        Transform cameraCenter = gameAppControl.gameObject.transform;
        if (needFollowCamera)
        {
        
            Quaternion q = cameraCenter.rotation;          
            Vector3 direction = q * Vector3.forward;//相对场景中心点，相机前方（内部z轴）的单位向量                                                                    //this.transform.LookAt(center);
            Vector3 newPos = direction * CyberCloudConfig.DialogDistance;//相对场景中心点
            Vector3 temp = cameraCenter.position + newPos;
            
            hint.gameObject.transform.rotation = Quaternion.Euler(q.eulerAngles.x, q.eulerAngles.y, 0);      
            hint.gameObject.transform.position = temp;
        }
        Vector3 v3 = hint.gameObject.transform.localPosition;// .position;
        v3.y = hintY+ cameraCenter.localPosition.y;
        hint.gameObject.transform.localPosition = v3;


        hint.gameObject.SetActive(true);
      

        hint.hintMsg(msg, showtime);
    }
    /// <summary>
    /// 关闭弱提示
    /// </summary>
    public void closeHintMsg()
    {
        hint.gameObject.SetActive(false);
    }
    public TipsControl getTipsControl() {
        if (tipsControl == null)
        {
            Debug.LogError("commonPanel 中无法获取TipsControl组件请确认 场景中AppTips上是否有该组件");
        }
        else
            return tipsControl;
        return null;
    }
    public GameObject getExitBt()
    {
        if (tipsControl == null)
        {
            Debug.LogError("commonPanel 中无法获取ExitBt 组件请确认 场景中exitCyberCloud上是否有该组件");
        }
        else
            return setingBt;
        return null;
    }
    /// <summary>
    /// 方法：当程序获得焦点（即程序没有后台时）bool为true，当程序失去焦点（即程序后台）时，bool为false；
    /// 此方法会自动执行，只需要在方法体内写好自己根据bool来执行的逻辑就可以了。
    ///  pico neo 有时出现OnApplicationFocus（false）和OnApplicationFocus（true）瞬间切换导致游戏退出 所以禁用
    /// </summary>
    /// <param name="isFocus"></param>
    void OnApplicationFocus(bool isFocus)
    {
        if (CyberCloudConfig.currentType != CyberCloudConfig.DeviceTypes.Pico2)
        return;
        //创维没有home键，锁屏键会触发OnApplicationFocus false 所以此处需要过滤掉
        if (CyberCloudConfig.currentType != CyberCloudConfig.DeviceTypes.skyworth)
        {
            
              if (isFocus)
              {
                  Debug.Log("ucvr 返回到游戏 刷新用户数据");  //  返回游戏的时候触发     执行顺序 2

                  OnResume();
              }
              else
              {
                  OnPause();

                  Debug.Log("ucvr  离开游戏 激活推送");  //  返回游戏的时候触发     执行顺序 1
              }
            
        }
    }
    /// <summary>
    /// activity的激活和暂停, 
    /// 这个方法游戏电源休眠时也会触发 pause（6dof摘下时电源休眠有问题）,OnApplicationFocus不会??????????????
    /// </summary>
    /// <param name="pause"></param>
    private void OnApplicationPause(bool pause)
    {
        Debug.Log("ucvr OnApplicationPause::" + (pause ? "true" : "false"));
        if (CyberCloudConfig.currentType != CyberCloudConfig.DeviceTypes.skyworth) { 
        //if (CyberCloudConfig.currentType== CyberCloudConfig.DeviceTypes.Pico2|| CyberCloudConfig.currentType == CyberCloudConfig.DeviceTypes.Pico) {
#if UNITY_ANDROID && !UNITY_EDITOR
                    if (pause)
                    {
                        OnPause();
                     
                    }
                    else
                    {
                           OnResume();
                    }
#endif
        }
    }
    public void closeSameScreen() {
    	 if (XMPPTool.castScreen == XMPPTool.CastScreen.CastScreening)
        xmpptool.sendBroadcastClose();
    }
    public void sendBroadcastOpenVRSTB(string playUrl)
    {
        //string playUrl = gameAppControl.Cyber_GetCastScreenPlayUrl();
        xmpptool.sendBroadcastOpenVRSTB(playUrl);
    }
    private void OnPause()
    {
    
        Debug.Log("ucvr try exitCyberCloud OnPause");
        closeSameScreen();
        //if(CyberCloud_UnitySDKAPI.ControllerManager.isTest==false)
        cloudCyberExit();
    }
    void OnDestroy()
    {
        Debug.Log("ucvr try exitCyberCloud OnDestroy");
        //cloudCyberExit();
    }
    /// <summary>
    /// OnSystemHome??????无法触发 home键回调
    /// 此jar回调未使用
    /// </summary>
    public void OnSystemHome() {
        Debug.Log("ucvr try exitCyberCloud OnSystemHome");
    }
    /// <summary>
    /// 此jiar回调未使用，因为stop时使用unitysendmessage无法发送消息到unity
    /// </summary>
    public void onStop() {
        Debug.Log("ucvr try exitCyberCloud onStop");
  
    }
    private bool cloudCyberExit() {
        //退出游戏后需要打开凝视或手柄操控点
        ControllerTool.CloseOrOpenAnyEnableContrlorCursor(CyberCloud_UnitySDKAPI.CursorStatus.openCursor);
        //非屏幕锁定状态
        if (GameAppControl.getGameRuning())
        {
            Debug.Log("ucvr exitCyberCloud ");
            gameAppControl.exitCyberGame();
            return true;
        }
        return false;
    }
    private void OnResume()
    {
        Debug.Log("sbyCommonPlane OnResume");
    
    }

}
